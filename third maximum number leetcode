Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.




Solution:

class Solution {
    public int thirdMax(int[] nums) {
        
        //declaring and initializing three nums to null
        Integer max_num = null;
        Integer sec_max_num = null;
        Integer third_max_num = null;
        
        //for loop takes O(n) time
        for(Integer num:nums){
            if(num.equals(max_num)||num.equals(sec_max_num)||num.equals(third_max_num)){
                continue;
            }
            //checking if the first num is greater
            if(max_num==null || num>max_num){
                third_max_num = sec_max_num;
                sec_max_num = max_num;
                max_num = num;
            }
            //checking if the second num is greater
            else if(sec_max_num==null || num>sec_max_num){
                third_max_num = sec_max_num;
                sec_max_num = num;
            }
            //checking if the third num is greater
            else if(third_max_num==null || num>third_max_num){
                third_max_num=num;
            }
        }
        
        if(third_max_num==null){
            return max_num;
        }
        
        return third_max_num;
    }
}
